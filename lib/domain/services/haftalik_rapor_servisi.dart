// ============================================================================
// lib/domain/services/haftalik_rapor_servisi.dart
// HAFTALƒ∞K BESLENME UYUM RAPORU SERVƒ∞Sƒ∞
// ============================================================================

import 'dart:math';
import '../../data/local/hive_service.dart';
import '../entities/gunluk_plan.dart';
import '../entities/haftalik_rapor.dart';
import '../../core/utils/app_logger.dart';

class HaftalikRaporServisi {
  
  /// Haftalƒ±k uyum raporu olu≈ütur
  static Future<HaftalikRapor> haftalikRaporOlustur({
    required DateTime baslangicTarihi,
  }) async {
    try {
      AppLogger.info('üìä Haftalƒ±k rapor olu≈üturuluyor: ${baslangicTarihi.toString()}');
      
      final raporVeri = <DateTime, GunlukUyumVerisi>{};
      double toplamUyumYuzdesi = 0.0;
      int toplamOgun = 0;
      int tamamlananOgun = 0;
      
      // 7 g√ºnl√ºk veri topla
      for (int gun = 0; gun < 7; gun++) {
        final tarih = DateTime(
          baslangicTarihi.year,
          baslangicTarihi.month,
          baslangicTarihi.day + gun,
        );
        
        final plan = await HiveService.planGetir(tarih);
        if (plan != null) {
          final tamamlananOgunler = await HiveService.tamamlananOgunleriGetir(tarih);
          
          // G√ºnl√ºk uyum hesapla
          final gunlukUyum = _gunlukUyumHesapla(plan, tamamlananOgunler);
          raporVeri[tarih] = gunlukUyum;
          
          toplamUyumYuzdesi += gunlukUyum.uyumYuzdesi;
          toplamOgun += plan.ogunler.length;
          tamamlananOgun += gunlukUyum.tamamlananOgunSayisi;
        } else {
          // Plan yoksa bo≈ü veri ekle
          raporVeri[tarih] = GunlukUyumVerisi(
            tarih: tarih,
            planVarMi: false,
            uyumYuzdesi: 0.0,
            tamamlananOgunSayisi: 0,
            toplamOgunSayisi: 0,
            tamamlananKalori: 0.0,
            hedefKalori: 0.0,
            makroUyum: MakroUyumVerisi(
              proteinUyum: 0.0,
              karbUyum: 0.0,
              yagUyum: 0.0,
            ),
          );
        }
      }
      
      // Haftalƒ±k ortalamalar hesapla
      final ortalamaUyum = raporVeri.isNotEmpty ? toplamUyumYuzdesi / raporVeri.length : 0.0;
      final genelUyumYuzdesi = toplamOgun > 0 ? (tamamlananOgun / toplamOgun) * 100 : 0.0;
      
      // Hedef analizi
      final hedefAnalizi = _hedefAnaliziYap(raporVeri);
      
      // Su t√ºketimi analizi
      final suAnalizi = _suTuketimiAnalizi(raporVeri);
      
      // Tavsiyeler √ºret
      final tavsiyeler = _haftalikTavsiyelerUret(ortalamaUyum, hedefAnalizi);
      
      AppLogger.success('‚úÖ Haftalƒ±k rapor olu≈üturuldu: %${ortalamaUyum.toStringAsFixed(1)} uyum');
      
      return HaftalikRapor(
        baslangicTarihi: baslangicTarihi,
        bitisTarihi: DateTime(
          baslangicTarihi.year,
          baslangicTarihi.month,
          baslangicTarihi.day + 6,
        ),
        gunlukVeriler: raporVeri,
        ortalamaUyumYuzdesi: ortalamaUyum,
        genelUyumYuzdesi: genelUyumYuzdesi,
        toplamTamamlananOgun: tamamlananOgun,
        toplamOgunSayisi: toplamOgun,
        hedefAnalizi: hedefAnalizi,
        suAnalizi: suAnalizi,
        tavsiyeler: tavsiyeler,
        olusturulmaTarihi: DateTime.now(),
      );
      
    } catch (e, stackTrace) {
      AppLogger.error('‚ùå Haftalƒ±k rapor olu≈üturma hatasƒ±', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }
  
  /// G√ºnl√ºk uyum hesapla
  static GunlukUyumVerisi _gunlukUyumHesapla(
    GunlukPlan plan,
    Map<String, bool> tamamlananOgunler,
  ) {
    final tamamlananSayisi = tamamlananOgunler.values.where((v) => v == true).length;
    final toplamSayi = plan.ogunler.length;
    final uyumYuzdesi = toplamSayi > 0 ? (tamamlananSayisi / toplamSayi) * 100 : 0.0;
    
    // Tamamlanan kaloriyi hesapla
    double tamamlananKalori = 0.0;
    for (final yemek in plan.ogunler) {
      if (tamamlananOgunler[yemek.id] == true) {
        tamamlananKalori += yemek.kalori;
      }
    }
    
    // Makro uyum analizi
    final makroUyum = _makroUyumAnalizi(plan, tamamlananOgunler);
    
    return GunlukUyumVerisi(
      tarih: plan.tarih,
      planVarMi: true,
      uyumYuzdesi: uyumYuzdesi,
      tamamlananOgunSayisi: tamamlananSayisi,
      toplamOgunSayisi: toplamSayi,
      tamamlananKalori: tamamlananKalori,
      hedefKalori: plan.makroHedefleri.gunlukKalori,
      makroUyum: makroUyum,
    );
  }
  
  /// Makro uyum analizi
  static MakroUyumVerisi _makroUyumAnalizi(
    GunlukPlan plan,
    Map<String, bool> tamamlananOgunler,
  ) {
    double tamamlananProtein = 0.0;
    double tamamlananKarb = 0.0;
    double tamamlananYag = 0.0;
    
    for (final yemek in plan.ogunler) {
      if (tamamlananOgunler[yemek.id] == true) {
        tamamlananProtein += yemek.protein;
        tamamlananKarb += yemek.karbonhidrat;
        tamamlananYag += yemek.yag;
      }
    }
    
    final proteinUyum = plan.makroHedefleri.gunlukProtein > 0
        ? (tamamlananProtein / plan.makroHedefleri.gunlukProtein) * 100
        : 0.0;
    final karbUyum = plan.makroHedefleri.gunlukKarbonhidrat > 0
        ? (tamamlananKarb / plan.makroHedefleri.gunlukKarbonhidrat) * 100
        : 0.0;
    final yagUyum = plan.makroHedefleri.gunlukYag > 0
        ? (tamamlananYag / plan.makroHedefleri.gunlukYag) * 100
        : 0.0;
    
    return MakroUyumVerisi(
      proteinUyum: proteinUyum,
      karbUyum: karbUyum,
      yagUyum: yagUyum,
    );
  }
  
  /// Hedef analizi yap
  static HedefAnalizi _hedefAnaliziYap(Map<DateTime, GunlukUyumVerisi> veriler) {
    final planliGunler = veriler.values.where((v) => v.planVarMi).toList();
    
    if (planliGunler.isEmpty) {
      return HedefAnalizi(
        enIyiGun: null,
        enKotuGun: null,
        ortalamaUyum: 0.0,
        tutarlilikSkoru: 0.0,
        gelismeTrendi: 'Veri yok',
      );
    }
    
    // En iyi ve en k√∂t√º g√ºnleri bul
    planliGunler.sort((a, b) => b.uyumYuzdesi.compareTo(a.uyumYuzdesi));
    final enIyiGun = planliGunler.first;
    final enKotuGun = planliGunler.last;
    
    // Ortalama uyum
    final ortalamaUyum = planliGunler.fold<double>(0.0, (sum, v) => sum + v.uyumYuzdesi) / planliGunler.length;
    
    // Tutarlƒ±lƒ±k skoru (standart sapma bazlƒ±)
    final varyans = planliGunler.fold<double>(0.0, (sum, v) => sum + pow(v.uyumYuzdesi - ortalamaUyum, 2)) / planliGunler.length;
    final tutarlilikSkoru = max(0.0, 100 - sqrt(varyans));
    
    // Geli≈üme trendi
    String gelismeTrendi = 'Stabil';
    if (planliGunler.length >= 3) {
      final ilkYari = planliGunler.take(planliGunler.length ~/ 2).fold<double>(0.0, (sum, v) => sum + v.uyumYuzdesi);
      final sonYari = planliGunler.skip(planliGunler.length ~/ 2).fold<double>(0.0, (sum, v) => sum + v.uyumYuzdesi);
      
      if (sonYari > ilkYari) {
        gelismeTrendi = 'Geli≈üiyor üìà';
      } else if (sonYari < ilkYari) {
        gelismeTrendi = 'Azalƒ±yor üìâ';
      }
    }
    
    return HedefAnalizi(
      enIyiGun: enIyiGun,
      enKotuGun: enKotuGun,
      ortalamaUyum: ortalamaUyum,
      tutarlilikSkoru: tutarlilikSkoru,
      gelismeTrendi: gelismeTrendi,
    );
  }
  
  /// Su t√ºketimi analizi
  static SuAnalizi _suTuketimiAnalizi(Map<DateTime, GunlukUyumVerisi> veriler) {
    double toplamOnerilen = 0.0;
    int gunSayisi = 0;
    
    for (final veri in veriler.values) {
      if (veri.planVarMi) {
        // Su ihtiyacƒ± hesapla (makrolara g√∂re)
        final onerilen = _gunlukSuIhtiyaciHesapla(veri.hedefKalori, veri.makroUyum);
        toplamOnerilen += onerilen;
        gunSayisi++;
      }
    }
    
    final ortalamaOnerilen = gunSayisi > 0 ? toplamOnerilen / gunSayisi : 2.5;
    
    return SuAnalizi(
      gunlukOnerilen: ortalamaOnerilen,
      haftalikOnerilen: ortalamaOnerilen * 7,
      aciklama: _suOneriAciklamasi(ortalamaOnerilen),
    );
  }
  
  /// G√ºnl√ºk su ihtiyacƒ± hesapla
  static double _gunlukSuIhtiyaciHesapla(double kalori, MakroUyumVerisi makroUyum) {
    // Temel su ihtiyacƒ±: 35ml/kg v√ºcut aƒüƒ±rlƒ±ƒüƒ± (ortalama 75kg = 2.6L)
    double temelSu = 2.6;
    
    // Kalori bazlƒ± ek ihtiya√ß: her 100 kcal i√ßin +100ml
    double kaloriBazliEk = kalori / 1000; // 1000 kcal i√ßin 1L ek
    
    // Protein bazlƒ± ek: y√ºksek protein daha fazla su gerektirir
    double proteinEk = makroUyum.proteinUyum > 100 ? 0.5 : 0.0;
    
    return temelSu + kaloriBazliEk + proteinEk;
  }
  
  /// Su √∂nerisi a√ßƒ±klamasƒ±
  static String _suOneriAciklamasi(double litre) {
    if (litre < 2.0) {
      return 'Su t√ºketiminizi artƒ±rmanƒ±z √∂neriliyor. Minimum 2 litre hedefleyin.';
    } else if (litre < 3.0) {
      return 'ƒ∞yi bir hidrasyon seviyesi. Bu d√ºzeyi korumaya devam edin.';
    } else {
      return 'Y√ºksek aktivite seviyeniz i√ßin uygun su miktarƒ±. M√ºkemmel!';
    }
  }
  
  /// Haftalƒ±k tavsiyeler √ºret
  static List<String> _haftalikTavsiyelerUret(double ortalamaUyum, HedefAnalizi analiz) {
    final tavsiyeler = <String>[];
    
    if (ortalamaUyum < 50) {
      tavsiyeler.add('üö® Uyum oranƒ±nƒ±z d√º≈ü√ºk. G√ºnl√ºk planlarƒ±nƒ±zƒ± daha d√ºzenli takip etmeye odaklanƒ±n.');
      tavsiyeler.add('üì± Hatƒ±rlatƒ±cƒ± kurarak √∂ƒü√ºn vakitlerinde bildirim alabilirsiniz.');
    } else if (ortalamaUyum < 75) {
      tavsiyeler.add('üìà ƒ∞yi gidiyorsunuz! Uyum oranƒ±nƒ±zƒ± %80\'in √ºzerine √ßƒ±karmaya odaklanƒ±n.');
      tavsiyeler.add('üéØ En √ßok atladƒ±ƒüƒ±nƒ±z √∂ƒü√ºnleri tespit edin ve onlara √∂zel dikkat g√∂sterin.');
    } else {
      tavsiyeler.add('üéâ Harika! Y√ºksek uyum oranƒ±nƒ±zƒ± korumaya devam edin.');
      tavsiyeler.add('üí™ Bu disiplinle hedeflerinize ula≈üacaksƒ±nƒ±z!');
    }
    
    if (analiz.tutarlilikSkoru < 60) {
      tavsiyeler.add('‚öñÔ∏è G√ºnler arasƒ± tutarlƒ±lƒ±ƒüƒ±nƒ±zƒ± artƒ±rabilirsiniz. D√ºzenli rutinler olu≈üturun.');
    }
    
    if (analiz.gelismeTrendi.contains('üìâ')) {
      tavsiyeler.add('üîÑ Son g√ºnlerde d√º≈ü√º≈ü var. Motivasyonunuzu yeniden kazanmak i√ßin k√º√ß√ºk hedefler belirleyin.');
    } else if (analiz.gelismeTrendi.contains('üìà')) {
      tavsiyeler.add('üöÄ Harika bir geli≈üim trendi! Bu momentumunuzu koruyun.');
    }
    
    return tavsiyeler;
  }
}