// lib/presentation/bloc/home/home_event.dart

import 'package:equatable/equatable.dart';
import '../../../domain/entities/yemek.dart';

abstract class HomeEvent extends Equatable {
  const HomeEvent();

  @override
  List<Object?> get props => [];
}

/// Ana sayfayÄ± yÃ¼kle
class LoadHomePage extends HomeEvent {
  final DateTime? targetDate;

  const LoadHomePage({this.targetDate});

  @override
  List<Object?> get props => [targetDate];
}

/// GÃ¼nlÃ¼k planÄ± yenile
class RefreshDailyPlan extends HomeEvent {
  final bool forceRegenerate;

  const RefreshDailyPlan({this.forceRegenerate = false});

  @override
  List<Object?> get props => [forceRegenerate];
}

/// Ã–ÄŸÃ¼n tamamlandÄ± olarak iÅŸaretle
class ToggleMealCompletion extends HomeEvent {
  final String yemekId;

  const ToggleMealCompletion(this.yemekId);

  @override
  List<Object?> get props => [yemekId];
}

/// Ã–ÄŸÃ¼nÃ¼ deÄŸiÅŸtir
class ReplaceMeal extends HomeEvent {
  final String eskiYemekId;
  final OgunTipi ogun;

  const ReplaceMeal({
    required this.eskiYemekId,
    required this.ogun,
  });

  @override
  List<Object?> get props => [eskiYemekId, ogun];
}

/// Tarihe gÃ¶re plan yÃ¼kle
class LoadPlanByDate extends HomeEvent {
  final DateTime date;

  const LoadPlanByDate(this.date);

  @override
  List<Object?> get props => [date];
}

/// HaftalÄ±k plan oluÅŸtur (7 gÃ¼nlÃ¼k)
class GenerateWeeklyPlan extends HomeEvent {
  final DateTime? startDate;
  final bool forceRegenerate;

  const GenerateWeeklyPlan({
    this.startDate,
    this.forceRegenerate = false,
  });

  @override
  List<Object?> get props => [startDate, forceRegenerate];
}

/// Alternatif yemekler oluÅŸtur
class GenerateAlternativeMeals extends HomeEvent {
  final Yemek mevcutYemek;
  final int sayi; // KaÃ§ alternatif isteniyor

  const GenerateAlternativeMeals({
    required this.mevcutYemek,
    this.sayi = 3,
  });

  @override
  List<Object?> get props => [mevcutYemek, sayi];
}

/// YemeÄŸi belirli bir yemekle deÄŸiÅŸtir
class ReplaceMealWith extends HomeEvent {
  final Yemek eskiYemek;
  final Yemek yeniYemek;

  const ReplaceMealWith({
    required this.eskiYemek,
    required this.yeniYemek,
  });

  @override
  List<Object?> get props => [eskiYemek, yeniYemek];
}

/// Malzeme iÃ§in alternatif besinler oluÅŸtur
class GenerateIngredientAlternatives extends HomeEvent {
  final Yemek yemek;
  final String malzemeMetni; // Ã–rn: "10 adet badem"
  final int malzemeIndex; // Yemekteki malzemelerin hangi index'i

  const GenerateIngredientAlternatives({
    required this.yemek,
    required this.malzemeMetni,
    required this.malzemeIndex,
  });

  @override
  List<Object?> get props => [yemek, malzemeMetni, malzemeIndex];
}

/// Malzemeyi alternatifiyle deÄŸiÅŸtir
class ReplaceIngredientWith extends HomeEvent {
  final Yemek yemek;
  final int malzemeIndex;
  final String yeniMalzemeMetni; // Ã–rn: "13 adet fÄ±ndÄ±k"

  const ReplaceIngredientWith({
    required this.yemek,
    required this.malzemeIndex,
    required this.yeniMalzemeMetni,
  });

  @override
  List<Object?> get props => [yemek, malzemeIndex, yeniMalzemeMetni];
}

/// ğŸ”¥ YENÄ° EVENT: Alternatif seÃ§imini iptal et ve ana sayfaya dÃ¶n
class CancelAlternativeSelection extends HomeEvent {
  const CancelAlternativeSelection();
}

/// ğŸ”¥ YENÄ° EVENT: Alternatif yemek seÃ§imini iptal et ve ana sayfaya dÃ¶n
class CancelAlternativeMealSelection extends HomeEvent {
  const CancelAlternativeMealSelection();
}

/// âœ… YENÄ° ONAY SÄ°STEMÄ° EVENT'LERÄ°
/// YemeÄŸi yedi olarak iÅŸaretle (henÃ¼z onaylamadÄ±)
class MarkMealAsEaten extends HomeEvent {
  final String yemekId;
  final String? notlar;

  const MarkMealAsEaten({
    required this.yemekId,
    this.notlar,
  });

  @override
  List<Object?> get props => [yemekId, notlar];
}

/// YemeÄŸi onayla (artÄ±k deÄŸiÅŸtirilemesin)
class ConfirmMealEaten extends HomeEvent {
  final String yemekId;
  final String? notlar;

  const ConfirmMealEaten({
    required this.yemekId,
    this.notlar,
  });

  @override
  List<Object?> get props => [yemekId, notlar];
}

/// YemeÄŸi atla
class SkipMeal extends HomeEvent {
  final String yemekId;
  final String? notlar;

  const SkipMeal({
    required this.yemekId,
    this.notlar,
  });

  @override
  List<Object?> get props => [yemekId, notlar];
}

/// Yemek durumunu sÄ±fÄ±rla
class ResetMealStatus extends HomeEvent {
  final String yemekId;

  const ResetMealStatus({required this.yemekId});

  @override
  List<Object?> get props => [yemekId];
}
